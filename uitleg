Below is a complete implementation of the multi‑step TestPlan wizard as we’ve discussed. In this solution, we split the original single‑page form into three main parts:

1. Landing Page (new_testplan_landing.html):
When the user first visits, we either create or reuse a draft TestPlan and store its ID in the session. Then the user is redirected to the Checklist page with the testplan_id in the URL.


2. Checklist Page (new_testplan_checklist.html):
This page displays your fixed questions in a table (with a plain‐text Reference column) and a “Save and Next” button. The page uses a tab navigation header that also lets you switch to the TestPlan Editor while auto‑saving the checklist data.


3. TestPlan Editor Page (testplan_create.html):
This page loads the same draft TestPlan (using the testplan_id) so that you can add steps or other details. Its tab header lets you switch back to the checklist. There’s also a “Save and Finish” button that (via an API call) saves the final TestPlan and then redirects to its detail view.



Below are the complete code files for a working version.


---

1. models.py

# testplan/models.py
from django.db import models

class TestPlan(models.Model):
    title = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    # You can add more fields as needed

    def __str__(self):
        return self.title

class TestPlanStep(models.Model):
    SECTION_CHOICES = (
        ('preparation', 'Preparation Steps'),
        ('execution', 'Execution Steps'),
        ('wrapup', 'Wrap-Up Steps'),
    )
    testplan = models.ForeignKey(TestPlan, on_delete=models.CASCADE, related_name='steps')
    step_order = models.PositiveIntegerField(default=0)
    section = models.CharField(max_length=20, choices=SECTION_CHOICES)
    step = models.CharField(max_length=255)
    procedure = models.TextField(blank=True)
    day_time_duration = models.CharField(max_length=100, blank=True)
    nq_duration = models.CharField(max_length=100, blank=True)
    executor = models.CharField(max_length=100, blank=True)
    comments = models.TextField(blank=True)

    class Meta:
        ordering = ['section', 'step_order']

    def __str__(self):
        return f"{self.testplan.title} - {self.get_section_display()} - {self.step}"

class ChecklistResponse(models.Model):
    testplan = models.ForeignKey(TestPlan, on_delete=models.CASCADE, related_name='checklist_responses')
    responses = models.JSONField(default=dict)  # Stores checklist responses as JSON
    saved_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Checklist for {self.testplan.title} saved at {self.saved_at}"

Explanation:
We define three models:
• TestPlan – the parent record.
• TestPlanStep – detailed steps (if needed in your editor).
• ChecklistResponse – stores the checklist answers as JSON and is linked to a TestPlan.


---

2. views.py

# testplan/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponseRedirect
from django.urls import reverse
from .models import TestPlan, TestPlanStep
from .forms import TestPlanStepForm

def new_testplan_landing(request):
    """
    Landing page: Create or reuse a draft TestPlan and store its ID in the session.
    Then redirect to the checklist page.
    """
    testplan_id = request.session.get("draft_testplan_id")
    if testplan_id:
        try:
            testplan = TestPlan.objects.get(id=testplan_id)
        except TestPlan.DoesNotExist:
            testplan = TestPlan.objects.create(title="Draft TestPlan")
            request.session["draft_testplan_id"] = testplan.id
    else:
        testplan = TestPlan.objects.create(title="Draft TestPlan")
        request.session["draft_testplan_id"] = testplan.id

    url = reverse('new_testplan_checklist') + f"?testplan_id={testplan.id}"
    return HttpResponseRedirect(url)

def new_testplan_checklist(request):
    """
    Checklist page: Load the draft TestPlan (using query param or session) and render checklist form.
    """
    testplan_id = request.GET.get('testplan_id') or request.session.get("draft_testplan_id")
    if not testplan_id:
        return redirect('new_testplan_landing')
    testplan = get_object_or_404(TestPlan, id=testplan_id)
    context = {
        'testplan_id': testplan_id,
    }
    return render(request, 'testplan/new_testplan_checklist.html', context)

def testplan_create(request):
    """
    TestPlan Editor page: Load the draft TestPlan (using query param or session) so that it is edited.
    """
    testplan_id = request.GET.get('testplan_id') or request.session.get("draft_testplan_id")
    if not testplan_id:
        return redirect('new_testplan_landing')
    testplan = get_object_or_404(TestPlan, id=testplan_id)
    context = {
        'testplan_id': testplan_id,
        'testplan': testplan,
    }
    return render(request, 'testplan/testplan_create.html', context)

def testplan_detail(request, pk):
    """
    Detail page: Show the final TestPlan.
    """
    testplan = get_object_or_404(TestPlan, pk=pk)
    prep_steps = testplan.steps.filter(section='preparation').order_by('step_order')
    exec_steps = testplan.steps.filter(section='execution').order_by('step_order')
    wrap_steps = testplan.steps.filter(section='wrapup').order_by('step_order')
    context = {
        'testplan': testplan,
        'prep_steps': prep_steps,
        'exec_steps': exec_steps,
        'wrap_steps': wrap_steps,
    }
    return render(request, 'testplan/testplan_detail.html', context)

Explanation:
• The landing view creates or reuses a draft TestPlan and stores its ID in the session.
• Both the checklist and editor pages load the same TestPlan using the testplan_id from either the query string or session.


---

3. urls.py

# testplan/urls.py
from django.urls import path
from . import views
from . import api_views

urlpatterns = [
    # Existing TestPlan views
    path('create/', views.testplan_create, name='testplan_create'),
    path('detail/<int:pk>/', views.testplan_detail, name='testplan_detail'),
    
    # New wizard pages
    path('new/', views.new_testplan_landing, name='new_testplan_landing'),
    path('new/checklist/', views.new_testplan_checklist, name='new_testplan_checklist'),
    
    # API endpoints
    path('api/templates_list/', api_views.templates_list, name='templates_list'),
    path('api/predefined_steps_list/', api_views.predefined_steps_list, name='predefined_steps_list'),
    path('api/load_template/<int:template_id>/', api_views.load_template, name='load_template'),
    path('api/save_predefined_step/', api_views.save_predefined_step, name='save_predefined_step'),
    path('api/save_template/', api_views.save_template, name='save_template'),
    path('api/save_checklist/', api_views.save_checklist, name='save_checklist'),
]

Explanation:
The URLs include the new wizard pages and the API endpoints.


---

4. api_views.py

Here’s the API view for saving the checklist responses. (Other endpoints you already have can remain as they are.)

# testplan/api_views.py
import json
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from .models import TestPlan, ChecklistResponse, TestPlanTemplate, PredefinedStep, TemplateStep

@csrf_exempt
def save_checklist(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            testplan_id = data.get('testplan_id')
            responses = data.get('responses')
            if not testplan_id:
                return JsonResponse({'status': 'error', 'message': 'Missing testplan_id'}, status=400)
            # Update or create the ChecklistResponse record for this TestPlan.
            checklist, created = ChecklistResponse.objects.update_or_create(
                testplan_id=testplan_id,
                defaults={'responses': responses}
            )
            return JsonResponse({'status': 'success', 'testplan_id': testplan_id})
        except Exception as e:
            return JsonResponse({'status': 'error', 'message': str(e)}, status=400)
    return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)

# (Other API endpoints like save_template remain unchanged or are implemented similarly.)

Explanation:
This view accepts a JSON payload containing the testplan_id and responses, then updates (or creates) a ChecklistResponse record for that TestPlan.


---

5. new_testplan_landing.html

Place this file at templates/testplan/new_testplan_landing.html:

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>New TestPlan Landing</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 flex items-center justify-center h-screen">
  <div class="bg-white p-6 rounded shadow-md text-center">
    <h1 class="text-3xl font-bold mb-4">New TestPlan</h1>
    <p class="mb-6">Click the button below to start creating your test plan.</p>
    <!-- This link points to the landing view which will create or reuse a draft -->
    <a href="{% url 'new_testplan_landing' %}" class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded font-semibold">
      New TestPlan
    </a>
  </div>
</body>
</html>

Explanation:
This is the starting page. When clicked, it creates/reuses a draft TestPlan and redirects to the checklist page.


---

6. new_testplan_checklist.html

Place this file at templates/testplan/new_testplan_checklist.html:

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>TestPlan Checklist</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
  <div class="container mx-auto p-4">
    <!-- Navigation Tabs -->
    <div class="mb-4 border-b border-gray-300">
      <nav class="flex space-x-6">
        <!-- Active: Checklist -->
        <a href="{% url 'new_testplan_checklist' %}?testplan_id={{ testplan_id }}" class="pb-2 text-blue-600 border-b-2 border-blue-600 font-medium">
          Checklist
        </a>
        <!-- Inactive: TestPlan Editor with auto-save -->
        <a href="{% url 'testplan_create' %}?testplan_id={{ testplan_id }}" onclick="return autoSaveAndNavigate(event, this)" class="pb-2 text-gray-500 hover:text-gray-700 hover:border-gray-500 font-medium">
          TestPlan Editor
        </a>
      </nav>
    </div>
    
    <h1 class="text-2xl font-bold mb-4">TestPlan Checklist</h1>
    <!-- Hidden field to hold testplan_id -->
    <input type="hidden" id="testplanId" value="{{ testplan_id }}">
    
    <!-- Checklist Table -->
    <table class="min-w-full bg-white">
      <thead>
        <tr>
          <th class="border px-4 py-2">Category</th>
          <th class="border px-4 py-2">Question</th>
          <th class="border px-4 py-2">Reference</th>
          <th class="border px-4 py-2">Answer</th>
        </tr>
      </thead>
      <tbody id="checklistTableBody">
        <!-- Example rows; add your fixed questions here -->
        <tr class="hover:bg-gray-100 transition-colors">
          <td class="border px-4 py-2">Support</td>
          <td class="border px-4 py-2">What kind of assistance do you require from SI-PE?</td>
          <td class="border px-4 py-2"><!-- Reference: empty for now --></td>
          <td class="border px-4 py-2">
            <input type="text" class="w-full p-1 border rounded" placeholder="Your answer">
          </td>
        </tr>
        <tr class="hover:bg-gray-100 transition-colors">
          <td class="border px-4 py-2">Support</td>
          <td class="border px-4 py-2">Is Workcenter / FLS / FASY / VIS support needed? Make sure the support is arranged.</td>
          <td class="border px-4 py-2"></td>
          <td class="border px-4 py-2">
            <input type="text" class="w-full p-1 border rounded" placeholder="Your answer">
          </td>
        </tr>
        <tr class="hover:bg-gray-100 transition-colors">
          <td class="border px-4 py-2">Safety</td>
          <td class="border px-4 py-2">Are there specific risks associated with this claim?</td>
          <td class="border px-4 py-2"></td>
          <td class="border px-4 py-2">
            <input type="text" class="w-full p-1 border rounded" placeholder="Your answer">
          </td>
        </tr>
        <tr class="hover:bg-gray-100 transition-colors">
          <td class="border px-4 py-2">Safety</td>
          <td class="border px-4 py-2">Are Safety overrides involved? Who will arrange it?</td>
          <td class="border px-4 py-2"></td>
          <td class="border px-4 py-2">
            <input type="text" class="w-full p-1 border rounded" placeholder="Your answer">
          </td>
        </tr>
        <!-- Continue adding rows for remaining questions -->
      </tbody>
    </table>
    
    <div class="mt-4 flex justify-end">
      <button id="saveChecklistBtn" class="bg-blue-500 text-white px-4 py-2 rounded">
        Save and Next
      </button>
    </div>
  </div>
  
  <script>
    // Function to collect checklist responses along with testplan_id
    function collectChecklistData() {
      const responses = [];
      const rows = document.querySelectorAll("#checklistTableBody tr");
      rows.forEach(row => {
        const category = row.children[0].textContent.trim();
        const question = row.children[1].textContent.trim();
        const reference = row.children[2].textContent.trim();
        const answerInput = row.children[3].querySelector("input");
        const answer = answerInput ? answerInput.value : "";
        responses.push({ category, question, reference, answer });
      });
      return {
        testplan_id: document.getElementById("testplanId").value,
        responses: responses
      };
    }
    
    // Save checklist data via AJAX
    function saveChecklistData() {
      return new Promise((resolve, reject) => {
        const data = collectChecklistData();
        fetch("{% url 'save_checklist' %}", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(result => {
          if (result.status === "success") {
            console.log("Checklist saved", result);
            resolve(result);
          } else {
            reject(result.message);
          }
        })
        .catch(error => reject(error));
      });
    }
    
    // Auto-save and navigate when clicking on a tab
    function autoSaveAndNavigate(event, element) {
      event.preventDefault();
      saveChecklistData()
      .then(result => {
        const baseUrl = element.getAttribute("href").split('?')[0];
        const testplanId = document.getElementById("testplanId").value;
        window.location.href = baseUrl + "?testplan_id=" + encodeURIComponent(testplanId);
      })
      .catch(error => {
        alert("Error saving checklist: " + error);
      });
      return false;
    }
    
    // Manual Save and Next button
    document.getElementById("saveChecklistBtn").addEventListener("click", function(){
      saveChecklistData()
      .then(result => {
        alert("Save successful!");
        window.location.href = "{% url 'testplan_create' %}?testplan_id=" + document.getElementById("testplanId").value;
      })
      .catch(error => {
        alert("Error saving checklist: " + error);
      });
    });
  </script>
</body>
</html>


---

7. testplan_create.html (TestPlan Editor Page)

Place this file at templates/testplan/testplan_create.html:

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>TestPlan Editor</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
  <div class="container mx-auto p-4">
    <!-- Navigation Tabs -->
    <div class="mb-4 border-b border-gray-300">
      <nav class="flex space-x-6">
        <a href="{% url 'new_testplan_checklist' %}?testplan_id={{ testplan_id }}" 
           onclick="return autoSaveAndNavigate(event, this)" 
           class="pb-2 text-gray-500 hover:text-gray-700 hover:border-gray-500 font-medium">
          Checklist
        </a>
        <a href="{% url 'testplan_create' %}?testplan_id={{ testplan_id }}" 
           class="pb-2 text-blue-600 border-b-2 border-blue-600 font-medium">
          TestPlan Editor
        </a>
      </nav>
    </div>
    
    <h1 class="text-2xl font-bold mb-4">TestPlan Editor</h1>
    <input type="hidden" id="testplanId" value="{{ testplan_id }}">
    
    <form id="testplanEditorForm">
      <div class="mb-4">
        <label class="block text-sm font-medium mb-1">Title</label>
        <input type="text" name="title" class="w-full p-1 border rounded" placeholder="TestPlan Title" value="{{ testplan.title }}">
      </div>
      <!-- Add additional fields as needed for editing your TestPlan -->
      
      <div class="mt-4 flex flex-wrap gap-2">
        <button type="button" id="saveTestplanBtn" class="bg-green-500 text-white px-3 py-1 rounded">Save TestPlan</button>
        <button type="button" onclick="openSaveTemplateModal()" class="bg-blue-500 text-white px-3 py-1 rounded">Save as Template</button>
        <button type="button" onclick="saveAndFinish()" class="bg-purple-500 text-white px-3 py-1 rounded">Save and Finish</button>
      </div>
    </form>
  </div>
  
  <script>
    function autoSaveAndNavigate(event, element) {
      event.preventDefault();
      const baseUrl = element.getAttribute("href").split('?')[0];
      const testplanId = document.getElementById("testplanId").value;
      window.location.href = baseUrl + "?testplan_id=" + encodeURIComponent(testplanId);
      return false;
    }
    
    document.getElementById("saveTestplanBtn").addEventListener("click", function(){
      // Implement AJAX save for the editor fields as needed.
      alert("TestPlan saved (editor)!");
    });
    
    function saveAndFinish() {
      const formData = {
        testplan_id: document.getElementById("testplanId").value,
        title: document.querySelector('input[name="title"]').value,
        // Collect additional fields as needed.
      };
      
      fetch("{% url 'save_testplan' %}", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData)
      })
      .then(response => response.json())
      .then(result => {
        if(result.status === "success"){
          alert("TestPlan saved successfully!");
          window.location.href = "{% url 'testplan_detail' pk=0 %}".replace("0", result.testplan_id);
        } else {
          alert("Error saving TestPlan: " + result.message);
        }
      })
      .catch(error => {
        console.error("Error during saveAndFinish:", error);
        alert("Error saving TestPlan");
      });
    }
    
    // Placeholder modal functions for Save as Template can be added here.
  </script>
</body>
</html>

Explanation:
• The TestPlan Editor page also receives the same testplan_id and uses it in the navigation tabs.
• The autoSaveAndNavigate function rebuilds the URL to include testplan_id.
• The form is basic—you can extend it with your fields and steps as needed.


---

8. testplan_detail.html (Detail Page – Optional)

For completeness, here’s a simple TestPlan detail page:

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>TestPlan Detail</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
  <div class="container mx-auto p-4">
    <h1 class="text-2xl font-bold mb-4">TestPlan Detail</h1>
    <p class="mb-2"><strong>Title:</strong> {{ testplan.title }}</p>
    <p class="mb-2"><strong>Created at:</strong> {{ testplan.created_at }}</p>
    <!-- Display steps, checklist responses, etc. as needed -->
  </div>
</body>
</html>


---

Final Recap

1. Landing Page (new_testplan_landing.html):
Creates or reuses a draft TestPlan and redirects to the checklist page with a query parameter and session storage.


2. Checklist Page (new_testplan_checklist.html):
Displays a fixed-question table with a plain text Reference column.
Has auto‑save functionality on tab switch and a “Save and Next” button that calls an API endpoint to save checklist responses.


3. TestPlan Editor (testplan_create.html):
Loads the same TestPlan via testplan_id, allowing editing of details.
Tabs and navigation preserve the testplan_id.


4. API Endpoint (save_checklist in api_views.py):
Receives JSON data containing the testplan_id and responses, and updates or creates a ChecklistResponse for that TestPlan.


5. Session & Query Parameter:
The draft TestPlan ID is stored in the session to ensure only one record is used throughout the wizard.



This full code should provide a cohesive, multi‑step TestPlan creation process where all data belongs to one TestPlan record. Test each page in order and verify that the testplan_id stays consistent (no duplicates) and that you can switch between tabs without losing data.

Let me know if you have any questions or need further adjustments!

